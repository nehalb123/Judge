[{"id":"fib","title":"Fibonacci Fun","description":"Write the `fib` method to return the N'th term.\r\nWe start counting from:\r\n* fib(0) = 0\r\n* fib(1) = 1.\r\n\r\n### Examples\r\n\r\n* `0` -> `0`\r\n* `6` -> `8`","timeLimit":1,"level":1,"func":{"name":"fib","returnStatement":{"type":"java.lang.Long","comment":" N'th term of Fibonacci sequence"},"parameters":[{"name":"n","type":"java.lang.Integer","comment":"id of fibonacci term to be returned"}]},"testCases":[{"input":["0"],"output":0},{"input":["1"],"output":1},{"input":["2"],"output":1},{"input":["3"],"output":2},{"input":["4"],"output":3},{"input":["5"],"output":5},{"input":["6"],"output":8},{"input":["20"],"output":6765},{"input":["40"],"output":102334155}]},
{"id":"number-of-leaves","title":"Count the Leaves","description":"Write a method `countLeaves` to find the total number of leaf nodes in a binary tree. If there is no leaf nodes, return 0..\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> # count = 4\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","timeLimit":1,"level":1,"func":{"name":"countLeaves","returnStatement":{"type":"java.lang.Integer","comment":" Number of leaf nodes"},"parameters":[{"name":"root","type":"com.algocup.type.TreeNode","comment":"Root of binary tree (TreeNode)"}]},"testCases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":4},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":2},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}]},
{"id":"isomorphic-strings","title":"Isomorphic Strings","description":"Given two strings - input1 and input2, implement method `isIsomorphic` to determine if they are isomorphic. Two strings are isomorphic if the letters in one string can be remapped to get the second string. Remapping a letter means replacing all occurrences of it with another letter. The ordering of the letters remains unchanged. You can also think of isomorphism as it is used in chemistry - i.e. having the same form or overall shape.\r\n\r\n### Examples\r\n\r\n* `'css', 'dll'` -> `true`\r\n* `'css', 'dle'` -> `false`","timeLimit":1,"level":1,"func":{"name":"isIsomorphic","returnStatement":{"type":"java.lang.Boolean","comment":" Indicate if strings are isomorphic"},"parameters":[{"name":"input1","type":"java.lang.String","comment":"input string 1 to be checked (ASCII)"},{"name":"input2","type":"java.lang.String","comment":"input string 2 to be checked (ASCII)"}]},"testCases":[{"input":["","a"],"output":false},{"input":[null,""],"output":false},{"input":["",null],"output":false},{"input":["",""],"output":true},{"input":[null,null],"output":false},{"input":["css","dll"],"output":true},{"input":["css","dle"],"output":false},{"input":["abcabc","xyzxyz"],"output":true},{"input":["abcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyz","xyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabc"],"output":true},{"input":["abcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyz","xyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzbacabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabc"],"output":false},{"input":["abcabc","xyzxzy"],"output":false},{"input":["a","z"],"output":true}]},
{"id":"vertical-flip","title":"Vertical Flip","description":"Given an m x n 2D image matrix where each integer represents a pixel, write a method `flipVerticalAxis` to flip it in-place along its vertical axis.\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 0],\r\n [1, 0]]\r\n->\r\n[[0, 1],\r\n [0, 1]]\r\n```","timeLimit":1,"level":1,"func":{"name":"flipVerticalAxis","returnStatement":{"type":"void","comment":"Operation in-place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Image matrix to flip"}]},"testCases":[{"input":[[[1,0],[0,1]]],"output":[[0,1],[1,0]]},{"input":[[[1,0],[1,0]]],"output":[[0,1],[0,1]]},{"input":[[[0]]],"output":[[0]]},{"input":[[[1,0,1],[1,1,0],[0,1,1]]],"output":[[1,0,1],[0,1,1],[1,1,0]]}]},
{"id":"palindrome-list","title":"Palindrome List","description":"Implement method `isPalindrome` with algorithm to check if a linked list is a palindrome.\r\n\r\n### Examples\r\n\r\n* `0->1->2->1->0` -> `true`","timeLimit":1,"level":1,"func":{"name":"isPalindrome","returnStatement":{"type":"java.lang.Boolean","comment":" Indicates if input linked list is palindrome (ListNode)"},"parameters":[{"name":"head","type":"com.algocup.type.ListNode","comment":"Linked List to check if it's palindrome"}]},"testCases":[{"input":[[0,1,2,1,0]],"output":true},{"input":[[0]],"output":true},{"input":[[]],"output":true},{"input":[[0,1,2,1,0,1,2,0,1,2,1,0]],"output":false},{"input":[[0,1,2,3,3,2,1,0]],"output":true},{"input":[[0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0]],"output":true},{"input":[[0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,7,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0]],"output":false}]},
{"id":"transpose-matrix","title":"Transpose Matrix","description":"You are given a square 2D image matrix where each integer represents a pixel. Write a method `transposeMatrix` to transform the matrix into its transpose - in-place. The transpose of a matrix is a matrix which is formed by turning all the rows of the source matrix into columns and vice-versa..\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 2, 3, 4],\r\n [5, 6, 7, 8],\r\n [9, 0, 1, 2],\r\n [3, 4, 5, 0]]\r\n->\r\n[[1, 5, 9, 3],\r\n [2, 6, 0, 4],\r\n [3, 7, 1, 5],\r\n [4, 8, 2, 0]]\r\n```","timeLimit":1,"level":1,"func":{"name":"transposeMatrix","returnStatement":{"type":"void","comment":" Operation in place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Matrix to transpose"}]},"testCases":[{"input":[[[1,2,3,4],[5,6,7,8],[9,0,1,2],[3,4,5,0]]],"output":[[1,5,9,3],[2,6,0,4],[3,7,1,5],[4,8,2,0]]},{"input":[[[0,2,3,4],[5,6,0,8],[9,0,1,2],[3,4,5,0]]],"output":[[0,5,9,3],[2,6,0,4],[3,0,1,5],[4,8,2,0]]},{"input":[[[0]]],"output":[[0]]},{"input":[[[1]]],"output":[[1]]},{"input":[[[1,0],[1,0]]],"output":[[1,1],[0,0]]}]},
{"id":"2-sum","title":"2 Sum","description":"Given an array of integers, find two numbers such that they add up to a specific target number.\r\n\r\nThe method `twoSum` should return indices of the two numbers such that they add up to the target, where *index1* must be less than *index2*. Please note that your returned answers (both *index1* and *index2*) are not zero-based.\r\n\r\n**Note**: You may assume that each input would have exactly one solution.\r\n\r\n### Example\r\n\r\n* `[2,7,11,15], 9` -> `[1,2]`","timeLimit":1,"level":1,"func":{"name":"twoSum","returnStatement":{"type":"[I","comment":" Indices of the two numbers"},"parameters":[{"name":"numbers","type":"[I","comment":"An array of Integer"},{"name":"target","type":"java.lang.Integer","comment":"target = numbers[index1] + numbers[index2]"}]},"testCases":[{"input":[[2,7,11,15],9],"output":[1,2]},{"input":[[1,0,-1],-1],"output":[2,3]},{"input":[[1,0,-1],0],"output":[1,3]},{"input":[[1,0,-1],1],"output":[1,2]},{"input":[[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99],-64],"output":[8,11]},{"input":[[1,2,33,23,2423,33,23,1,7,6,8787,5,33,2,3,-23,-54,-67,100,400],407],"output":[9,20]},{"input":[[-1,-2,-3,-4,-5,-6,-100,-98,-111,-11],-111],"output":[7,10]},{"input":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,9,9,9,10,11,1001,2001,198,201,203,201,999,345,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,5,6,1,1,1,1,1,1,1,1,1,1,1,101,1,1,1,1,1,1,1,1],107],"output":[78,90]}]},
{"id":"repeated-elements","title":"Repeated Elements","description":"Write a method `findDuplicates` to find the repeated or duplicate elements in an array. This method should return a list of repeated integers in a string with the elements sorted in ascending order.\r\n\r\n### Example\r\n\r\n* `[2,5,7,11,15,11,15]` -> `'[11, 15]'`\r\n* `[2,5,7]` -> `'[]'`","timeLimit":1,"level":1,"func":{"name":"findDuplicates","returnStatement":{"type":"java.lang.String","comment":" Array of sorted numbers representing duplicates in original array"},"parameters":[{"name":"arr","type":"[I","comment":"An array of Integers"}]},"testCases":[{"input":[[2,5,7,11,15,11,15]],"output":"[11, 15]"},{"input":[[2,5,7,11,15,11,2,4,5]],"output":"[2, 5, 11]"},{"input":[[2,5,7,11,15,4]],"output":"[]"},{"input":[[7,5,2,2,5,7,7,7,2,2,5,5]],"output":"[2, 5, 7]"},{"input":[[]],"output":"[]"}]},
{"id":"reverse-list","title":"Reverse Linked List","description":"Given a singly linked list, write a method `reverseList` to reverse the list and return new head.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6` -> `6->5->4->3->2->1`","timeLimit":1,"level":1,"func":{"name":"reverseList","returnStatement":{"type":"com.algocup.type.ListNode","comment":" Reversed linked list (ListNode)"},"parameters":[{"name":"head","type":"com.algocup.type.ListNode","comment":"Linked List head"}]},"testCases":[{"input":[[1,2,3,4,5,6]],"output":[6,5,4,3,2,1]},{"input":[[1]],"output":[1]},{"input":[[1,2]],"output":[2,1]},{"input":[[2,2]],"output":[2,2]},{"input":[null],"output":null}]},
{"id":"binary-representation","title":"Binary Representation","description":"Write a method `computeBinary` to compute the binary representation of an integer. The method should return a string with 1s and 0s. Use the minimum number of binary digits needed for representation (truncate unnecessary 0s).\n\n**Note**: using java framework to solve it is forbidden - you have to code it by yourself.\n\n### Example\n\n* `6` -> `'110'`\n* `-5` -> `'11111111111111111111111111111011'`","timeLimit":2,"level":2,"func":{"name":"computeBinary","returnStatement":{"type":"java.lang.String","comment":" Binary representation"},"parameters":[{"name":"value","type":"java.lang.Integer","comment":"Input number"}]},"testCases":[{"input":[5],"output":"101"},{"input":[6],"output":"110"},{"input":[-5],"output":"11111111111111111111111111111011"},{"input":[2147483647],"output":"1111111111111111111111111111111"},{"input":[0],"output":"0"},{"input":[10],"output":"1010"},{"input":[15],"output":"1111"},{"input":[52],"output":"110100"},{"input":[1],"output":"1"}]},
{"id":"sum-lists-2","title":"Sum Lists 2","description":"You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in forward order, such that the 1's digit is at the tail of the list. Write method `addLists` that adds the two numbers and returns the sum as a linked list.\r\n\r\n### Examples\r\n\r\n* `6->1->7, 2->9->5` -> `9->1->2` (617 + 295 = 912)","timeLimit":1,"level":2,"func":{"name":"addLists","returnStatement":{"type":"com.algocup.type.ListNode","comment":" linked list node containing result of sum (ListNode)"},"parameters":[{"name":"l1","type":"com.algocup.type.ListNode","comment":"First Linked List to add"},{"name":"l2","type":"com.algocup.type.ListNode","comment":"Second Linked List to add"}]},"testCases":[{"input":[[6,1,7],[2,9,5]],"output":[9,1,2]},{"input":[[1,4,5,6,7],[1,3,9]],"output":[1,4,7,0,6]},{"input":[[1,4,5,6,7],[]],"output":[1,4,5,6,7]},{"input":[[1],[1,3,9]],"output":[1,4,0]},{"input":[[9],[1]],"output":[1,0]},{"input":[[],[]],"output":[]}]},
{"id":"remove-dups","title":"Remove Duplicates","description":"Write method `removeDuplicates` to remove duplicates from an unsorted linked list.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->3->3` -> `1->2->3->4`","timeLimit":1,"level":1,"func":{"name":"removeDuplicates","returnStatement":{"type":"com.algocup.type.ListNode","comment":" Linked List with removed duplicates (ListNode)"},"parameters":[{"name":"node","type":"com.algocup.type.ListNode","comment":"Linked List where we need to remove duplicates"}]},"testCases":[{"input":[[1,2,3,4,3,3]],"output":[1,2,3,4]},{"input":[[]],"output":[]},{"input":[[1,1,1,1]],"output":[1]},{"input":[[1,1,1,1,2,3,4,3,3]],"output":[1,2,3,4]},{"input":[[1,1,2,2,3,3,4,4,3,3]],"output":[1,2,3,4]},{"input":[[1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3]],"output":[1,2,3,4]}]},
{"id":"insert-at-tail","title":"Insert Node at Tail","description":"Write a method `insertAtTail` to insert a node at the end of a singly linked list. Return the head of the modified list.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6, 7` -> `1->2->3->4->5->6->7`","timeLimit":1,"level":1,"func":{"name":"insertAtTail","returnStatement":{"type":"com.algocup.type.ListNode","comment":" New linked list (ListNode)"},"parameters":[{"name":"head","type":"com.algocup.type.ListNode","comment":"Linked List head"},{"name":"data","type":"java.lang.Integer","comment":"New value"}]},"testCases":[{"input":[[1,2,3,4,5,6],7],"output":[1,2,3,4,5,6,7]},{"input":[[],2],"output":[2]},{"input":[[1],1],"output":[1,1]},{"input":[[5,3],5],"output":[5,3,5]}]},
{"id":"word-ladder","title":"Word Ladder","description":"Given two words (start and end), and a dictionary, write a method `ladderLength` to find the length of shortest transformation sequence from start to end, such that:\r\n* Only one letter can be changed at a time\r\n* Each intermediate word must exist in the dictionary\r\n* Including first word as one transformation\r\n\r\n### Examples\r\n\r\n* `\"a\", \"c\", [\"a\",\"b\",\"c\"]` -> `2`\r\n* `\"game\", \"thee\", [\"frye\",\"heat\",\"tree\",\"thee\",\"game\",\"free\",\"hell\",\"fame\",\"faye\"]` -> `7`","timeLimit":1,"level":2,"func":{"name":"ladderLength","returnStatement":{"type":"java.lang.Integer","comment":"The shortest length"},"parameters":[{"name":"begin","type":"java.lang.String","comment":"the begin word"},{"name":"end","type":"java.lang.String","comment":"the end word"},{"name":"dict","type":"java.util.HashSet","comment":"the dictionary", "generic":"String"}]},"testCases":[{"input":["a","c",["a","b","c"]],"output":2},{"input":["hot","dog",["hot","cog","dog","tot","hog","hop","pot","dot"]],"output":3},{"input":["game","thee",["frye","heat","tree","thee","game","free","hell","fame","faye"]],"output":7},{"input":["kiss","tusk",["miss","dusk","kiss","musk","tusk","diss","disk","sang","ties","muss"]],"output":5},{"input":["teach","place",["peale","wilts","place","fetch","purer","pooch","peace","poach","berra","teach","rheum","peach"]],"output":4},{"input":["ta","if",["ts","sc","ph","ca","jr","hf","to","if","ha","is","io","cf","ta"]],"output":4},{"input":["qa","sq",["si","go","se","cm","so","ph","mt","db","mb","sb","kr","ln","tm","le","av","sm","ar","ci","ca","br","ti","ba","to","ra","fa","yo","ow","sn","ya","cr","po","fe","ho","ma","re","or","rn","au","ur","rh","sr","tc","lt","lo","as","fr","nb","yb","if","pb","ge","th","pm","rb","sh","co","ga","li","ha","hz","no","bi","di","hi","qa","pi","os","uh","wm","an","me","mo","na","la","st","er","sc","ne","mn","mi","am","ex","pt","io","be","fm","ta","tb","ni","mr","pa","he","lr","sq","ye"]],"output":5},{"input":["cet","ism",["kid","tag","pup","ail","tun","woo","erg","luz","brr","gay","sip","kay","per","val","mes","ohs","now","boa","cet","pal","bar","die","war","hay","eco","pub","lob","rue","fry","lit","rex","jan","cot","bid","ali","pay","col","gum","ger","row","won","dan","rum","fad","tut","sag","yip","sui","ark","has","zip","fez","own","ump","dis","ads","max","jaw","out","btu","ana","gap","cry","led","abe","box","ore","pig","fie","toy","fat","cal","lie","noh","sew","ono","tam","flu","mgm","ply","awe","pry","tit","tie","yet","too","tax","jim","san","pan","map","ski","ova","wed","non","wac","nut","why","bye","lye","oct","old","fin","feb","chi","sap","owl","log","tod","dot","bow","fob","for","joe","ivy","fan","age","fax","hip","jib","mel","hus","sob","ifs","tab","ara","dab","jag","jar","arm","lot","tom","sax","tex","yum","pei","wen","wry","ire","irk","far","mew","wit","doe","gas","rte","ian","pot","ask","wag","hag","amy","nag","ron","soy","gin","don","tug","fay","vic","boo","nam","ave","buy","sop","but","orb","fen","paw","his","sub","bob","yea","oft","inn","rod","yam","pew","web","hod","hun","gyp","wei","wis","rob","gad","pie","mon","dog","bib","rub","ere","dig","era","cat","fox","bee","mod","day","apr","vie","nev","jam","pam","new","aye","ani","and","ibm","yap","can","pyx","tar","kin","fog","hum","pip","cup","dye","lyx","jog","nun","par","wan","fey","bus","oak","bad","ats","set","qom","vat","eat","pus","rev","axe","ion","six","ila","lao","mom","mas","pro","few","opt","poe","art","ash","oar","cap","lop","may","shy","rid","bat","sum","rim","fee","bmw","sky","maj","hue","thy","ava","rap","den","fla","auk","cox","ibo","hey","saw","vim","sec","ltd","you","its","tat","dew","eva","tog","ram","let","see","zit","maw","nix","ate","gig","rep","owe","ind","hog","eve","sam","zoo","any","dow","cod","bed","vet","ham","sis","hex","via","fir","nod","mao","aug","mum","hoe","bah","hal","keg","hew","zed","tow","gog","ass","dem","who","bet","gos","son","ear","spy","kit","boy","due","sen","oaf","mix","hep","fur","ada","bin","nil","mia","ewe","hit","fix","sad","rib","eye","hop","haw","wax","mid","tad","ken","wad","rye","pap","bog","gut","ito","woe","our","ado","sin","mad","ray","hon","roy","dip","hen","iva","lug","asp","hui","yak","bay","poi","yep","bun","try","lad","elm","nat","wyo","gym","dug","toe","dee","wig","sly","rip","geo","cog","pas","zen","odd","nan","lay","pod","fit","hem","joy","bum","rio","yon","dec","leg","put","sue","dim","pet","yaw","nub","bit","bur","sid","sun","oil","red","doc","moe","caw","eel","dix","cub","end","gem","off","yew","hug","pop","tub","sgt","lid","pun","ton","sol","din","yup","jab","pea","bug","gag","mil","jig","hub","low","did","tin","get","gte","sox","lei","mig","fig","lon","use","ban","flo","nov","jut","bag","mir","sty","lap","two","ins","con","ant","net","tux","ode","stu","mug","cad","nap","gun","fop","tot","sow","sal","sic","ted","wot","del","imp","cob","way","ann","tan","mci","job","wet","ism","err","him","all","pad","hah","hie","aim","ike","jed","ego","mac","baa","min","com","ill","was","cab","ago","ina","big","ilk","gal","tap","duh","ola","ran","lab","top","gob","hot","ora","tia","kip","han","met","hut","she","sac","fed","goo","tee","ell","not","act","gil","rut","ala","ape","rig","cid","god","duo","lin","aid","gel","awl","lag","elf","liz","ref","aha","fib","oho","tho","her","nor","ace","adz","fun","ned","coo","win","tao","coy","van","man","pit","guy","foe","hid","mai","sup","jay","hob","mow","jot","are","pol","arc","lax","aft","alb","len","air","pug","pox","vow","got","meg","zoe","amp","ale","bud","gee","pin","dun","pat","ten","mob"]],"output":11}]},
{"id":"postorder-traversal","title":"Postorder Traversal","description":"Given a binary tree, Write a method `postorderTraversal` to traverse the tree in the postorder manner. Return array of elements visited in postorder format.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> 4526731\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","timeLimit":1,"level":1,"func":{"name":"postorderTraversal","returnStatement":{"type":"[I","comment":" Postordered array of binary tree elements"},"parameters":[{"name":"root","type":"com.algocup.type.TreeNode","comment":"Root of binary tree (TreeNode)"}]},"testCases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":[4,5,2,6,7,3,1]},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7}}}],"output":[4,2,7,3,1]},{"input":[{"data":1}],"output":[1]},{"input":[null],"output":[]}]}
]
