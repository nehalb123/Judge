[{"id":"fib","title":"Fibonacci","description":"Write the `fib` method to return the N'th term.\r\nWe start counting from:\r\n* fib(0) = 0\r\n* fib(1) = 1.\r\n\r\n### Examples\r\n\r\n* `0` -> `0`\r\n* `6` -> `8`","timeLimit":1,"level":1,"func":{"name":"fib","returnStatement":{"type":"java.lang.Long","comment":" N'th term of Fibonacci sequence"},"parameters":[{"name":"n","type":"java.lang.Integer","comment":"id of fibonacci term to be returned"}]},"testCases":[{"input":["0"],"output":0},{"input":["1"],"output":1},{"input":["2"],"output":1},{"input":["3"],"output":2},{"input":["4"],"output":3},{"input":["5"],"output":5},{"input":["6"],"output":8},{"input":["20"],"output":6765},{"input":["40"],"output":102334155}]},
{"id":"number-of-leaves","title":"Count the Leaves","description":"Write a method `countLeaves` to find the total number of leaf nodes in a binary tree. If there is no leaf nodes, return 0..\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> # count = 4\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","timeLimit":1,"level":1,"func":{"name":"countLeaves","returnStatement":{"type":"java.lang.Integer","comment":" Number of leaf nodes"},"parameters":[{"name":"root","type":"com.jalgoarena.type.TreeNode","comment":"Root of binary tree (TreeNode)"}]},"testCases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":4},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":2},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}]},
{"id":"isomorphic-strings","title":"Isomorphic Strings","description":"Given two strings - input1 and input2, implement method `isIsomorphic` to determine if they are isomorphic. Two strings are isomorphic if the letters in one string can be remapped to get the second string. Remapping a letter means replacing all occurrences of it with another letter. The ordering of the letters remains unchanged. You can also think of isomorphism as it is used in chemistry - i.e. having the same form or overall shape.\r\n\r\n### Examples\r\n\r\n* `'css', 'dll'` -> `true`\r\n* `'css', 'dle'` -> `false`","timeLimit":1,"level":1,"func":{"name":"isIsomorphic","returnStatement":{"type":"java.lang.Boolean","comment":" Indicate if strings are isomorphic"},"parameters":[{"name":"input1","type":"java.lang.String","comment":"input string 1 to be checked (ASCII)"},{"name":"input2","type":"java.lang.String","comment":"input string 2 to be checked (ASCII)"}]},"testCases":[{"input":["","a"],"output":false},{"input":[null,""],"output":false},{"input":["",null],"output":false},{"input":["",""],"output":true},{"input":[null,null],"output":false},{"input":["css","dll"],"output":true},{"input":["css","dle"],"output":false},{"input":["abcabc","xyzxyz"],"output":true},{"input":["abcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyz","xyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabc"],"output":true},{"input":["abcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyz","xyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzbacabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabc"],"output":false},{"input":["abcabc","xyzxzy"],"output":false},{"input":["a","z"],"output":true}]}
]
